<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:pro="http://www.liquibase.org/xml/ns/pro"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.6.xsd
    http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.6.xsd ">
    <changeSet id="init" author="Haam">
        <tagDatabase tag="0.0.0" />
    </changeSet>
    <changeSet id="add_table__product_policy" author="T.H.">
        <comment>
            policy for all products on sale
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `product_policy` (
                `product_type`     ENUM('item', 'package') NOT NULL, 
                `product_id`       BIGINT UNSIGNED NOT NULL,
                `auto_cancel_secs` INT NOT NULL,
                `warranty_hours`   INT NOT NULL,
                PRIMARY KEY (`product_type`, `product_id`)
            )
        </sql>
        <rollback>
            DROP TABLE `product_policy`
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.1" author="T.H.">
        <tagDatabase tag="0.0.1" />
    </changeSet>
    <changeSet id="modify_product_type_enum" author="T.H.">
        <comment>
            Modify enum members in the column `product_type`,
            - '1' means 'item'
            - '2' means 'package'
            Also `auto_cancel_secs`, `warranty_hours` should be unsigned 32-bit integers.
            Note currently the table does not have any record yet, it is allowed to modify the
            schema directly, with records and live production server there should be several
            steps for the upgrade
        </comment>
        <sql dbms="mariadb">
            ALTER TABLE `product_policy` MODIFY `product_type` ENUM('1', '2') NOT NULL;
            ALTER TABLE `product_policy` MODIFY `auto_cancel_secs` INT UNSIGNED NOT NULL;
            ALTER TABLE `product_policy` MODIFY `warranty_hours`   INT UNSIGNED NOT NULL;
        </sql>
        <rollback>
            ALTER TABLE `product_policy` MODIFY `warranty_hours`   INT NOT NULL;
            ALTER TABLE `product_policy` MODIFY `auto_cancel_secs` INT NOT NULL;
            ALTER TABLE `product_policy` MODIFY `product_type` ENUM('item', 'package') NOT NULL;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.2" author="T.H.">
        <tagDatabase tag="0.0.2" />
    </changeSet>
    <changeSet id="add_table__product_price" author="T.H.">
        <comment>
            price for all products on sale,
            - the columns `start_tz_utc` and `end_tz_utc` indicate the timezone and number of minutes from local time to UTC for `start_after` and `end_before` respectively
            - In this application, it is unnecessary to specify microsecond precision for product price and stock level check, mariaDB defaults to zero without configuring the precision
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `product_price` (
                `store_id`         INT UNSIGNED NOT NULL,
                `product_type`     ENUM('1', '2') NOT NULL, 
                `product_id`       BIGINT UNSIGNED NOT NULL,
                `price`         INT UNSIGNED  NOT NULL,
                `start_after`   DATETIME  NOT NULL,
                `end_before`    DATETIME  NOT NULL,
                `start_tz_utc`  SMALLINT  NOT NULL,
                `end_tz_utc`    SMALLINT  NOT NULL,
                PRIMARY KEY (`store_id`, `product_type`, `product_id`)
            )
        </sql>
        <rollback>
            DROP TABLE `product_price`
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.3" author="T.H.">
        <tagDatabase tag="0.0.3" />
    </changeSet>
    <changeSet id="add_table__stock_level_inventory" author="T.H.">
        <comment>
            stock level for all products on sale,
            - `qty_cancelled` indicates quantity of products has been cancelled by (internal) inventory service, the quantity which is no longer available to customers.
            - `expiry` always represents some time with UTC, time zone is not essential to save for this application
            - currently `expiry` is part of natural (primary) key, when the data grows to millions of records, consider to replace `expiry` column with some surrogate key.
            - mariaDB automatically modifies value of a timestamp column (`expiry` for example) if it is not prsent in a updating row
              - currently in this application, `expiry` cannot be modified once created (TODO, fix this problem)
              - by explcitly adding `DEFAULT xxx`, it can avoid MariaDB from appending `ON UPDATE CURRENT_TIMESTAMP` syntax to the timestamp column definition.
        </comment>
        <sql dbms="mariadb">
            CREATE TABLE  `stock_level_inventory` (
                `store_id`      INT UNSIGNED NOT NULL,
                `product_type`  ENUM('1', '2') NOT NULL, 
                `product_id`    BIGINT UNSIGNED NOT NULL,
                `expiry`        TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                `qty_total`     INT UNSIGNED NOT NULL,
                `qty_cancelled` INT UNSIGNED NOT NULL,
                PRIMARY KEY (`store_id`, `product_type`, `product_id`, `expiry`)
            );
        </sql>
        <rollback>
            DROP TABLE `stock_level_inventory`;
        </rollback>
    </changeSet>
    <changeSet id="tag_version_0.0.4" author="T.H.">
        <tagDatabase tag="0.0.4" />
    </changeSet>
</databaseChangeLog>

