[package]
name = "payment"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
serde = {version="^1.0" , features=["derive"]}
serde_json = {version="^1.0" , features=["std"]}
serde_qs = {version="^0.13", default-features=false, features=[]} # applied in Stripe API server
chrono  = {version="^0.4.38", features=["std", "serde"]}

tracing = {version="^0.1", default-features=false}

async-trait = "^0.1.80"
actix-http = {version="^3.6", default-features=false, features=[]}
actix-service = "^2"
actix-web = {version="^4.5.1", default-features=false, features=["macros"]}
actix-web-httpauth = {version="^0.8"}

jsonwebtoken = "^9.3"

# [Important Design Note]
#
# For client which runs operation to remote servers e.g. 3rd-party payment processor
# , user-management app server, I don't use crate `awc` (actix-web-client) in this
# payment application.
#
# The reason is that its internal contains non-Send data structure, such as `std::rc::Rc`
# in `awc::Client`, this makes sense ONLY if your program always sticks to actix's
# default single-thread runtime (originated from tokio crate). In such case, most of
# struct types in this application have to implement `!Send` , also all traits defined in
# this app have to ignore `Send` check by specifying the macro `#[async_trait(?Send)]`
#
# However if you'd like to swtich back to multi-threaded tokio runtime, you need to
# ensure all necessary types / traits implement `Send`
#
# For simplicitly, I use `hyper` with only `client` feature enabled.
# TODO, enable `http2` feature
hyper = {version="^1.3.0", features=["client", "http1"]}
hyper-util = {version="^0.1.3", features=["tokio"]}

# secure connections for interaction with 3rd party services
# e.g. payment processors, or external database server not in private network area
tokio-native-tls = "^0.3"

# for empty body type
http-body-util = "^0.1"

# required for RwLock, Mutex, and `select` macro, with Send, Sync trait
tokio = {version="^1.23.1", features=["sync","macros"]}

mysql_async = {version="^0.34", default-features=false, features=["minimal", "native-tls-tls", "rust_decimal"]}

# required by the result set stream in `Query::stream()` in `mysql-async`
futures-util = {version="^0.3.30", features=["std"]}

# AMQP / RabbitMQ
lapin = {version="^2.3.4", default-features=false}
deadpool-lapin = {version="^0.12", default-features=false, features=["rt_tokio_1"]}

# Note 3rd party payment processors
# this application does not use `async-stripe` , it uses about 2.5GB memory during complie time
# , also contains many of types not used in this application

# currency, amount of order lines, exchange rate, will be saved and
# represented in the `Decimal` type in this project
rust_decimal = {version="^1.35", default-features=false, features=[]}

ecommerce-common = {version="^0.1.0", path="../common/rust"}

[features]

[[test]]
name = "integration"
path = "./tests/integration/mod.rs"
test = true

[[test]]
name = "unit"
path = "./tests/unit/mod.rs"
test = true
