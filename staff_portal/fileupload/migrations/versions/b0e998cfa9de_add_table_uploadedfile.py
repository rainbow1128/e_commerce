"""add table schema

Revision ID: b0e998cfa9de
Revises: 
Create Date: 2021-06-10 13:53:14.416891

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
from pymysql.constants.CLIENT import MULTI_STATEMENTS

# revision identifiers, used by Alembic.
revision = 'b0e998cfa9de'
down_revision = None
branch_labels = None
depends_on = None


def _migrate_auth_server(sqls, is_offline, from_revision, to_revision,
        auth_url=None, sql_exe=None):
    """
    the authentication server is updated with given list of raw SQL
    statement, such as extra low-level permission , quota type
    managed by the authentication server.
    """
    if to_revision is None or from_revision is None:
        # whether starting from base
        sqls = '; '.join(sqls)
        if is_offline:
            assert sql_exe , "sql_exe must not be null"
            sql_exe(sql=sqls) # simply print the SQL out
        else:
            assert auth_url, "auth_url must not be null"
            # extra engine for updating auth server
            engine = sa.create_engine(auth_url, connect_args={'client_flag': MULTI_STATEMENTS})
            with engine.connect() as conn:
                with conn.begin(): # transaction start
                    result = conn.execute(sa.text(sqls))
                    #raise ValueError


def upgrade(is_offline, from_revision, to_revision, service_db, auth_url=None, sql_exe=None):
    # ### commands auto generated by Alembic - please adjust! ###
    """
    since this fileupload service uses MySQL, which implicitly commits
    all DDL operations (data definition languages, i.e. CREATE TABLE,
    DROP TABLE) , you will need to manually rollback once migration failed
    (no such issue in PostgreSQL)
    """
    op.create_table('uploadedfile',
        sa.Column('id', sa.String(length=16), nullable=False),
        sa.Column('owner', sa.String(length=16), nullable=True),
        sa.Column('path', sa.String(length=256), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        mysql_collate='utf8mb4_bin', # case-sensitive charset in mysql
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.create_table('filereference',
        sa.Column('resource_id', sa.String(length=16), nullable=False),
        sa.Column('service_label', sa.String(length=20), nullable=False),
        sa.ForeignKeyConstraint(['resource_id'], ['uploadedfile.id'], ),
        sa.PrimaryKeyConstraint('resource_id', 'service_label'),
        mysql_collate='utf8mb4_bin',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    op.create_table('fileaccesscontrollist',
        sa.Column('resource_id', sa.String(length=16), nullable=False),
        sa.Column('prof_id', sa.String(length=16), nullable=False),
        sa.Column('rd_flg', sa.Boolean(), nullable=True),
        sa.Column('wr_flg', sa.Boolean(), nullable=True),
        sa.Column('rd_acl_flg', sa.Boolean(), nullable=True),
        sa.Column('wr_acl_flg', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['resource_id'], ['uploadedfile.id'], ),
        sa.PrimaryKeyConstraint('resource_id', 'prof_id'),
        mysql_collate='utf8mb4_bin',
        mysql_default_charset='utf8mb4',
        mysql_engine='InnoDB'
    )
    # update mysql-specific grant SQL statement
    sqls = [
        "GRANT SELECT, INSERT, UPDATE, DELETE ON `%s`.`uploadedfile` TO '%s'@'%s'" % (service_db['name'],service_db['user'],service_db['host']),
        "GRANT SELECT, INSERT, UPDATE, DELETE ON `%s`.`filereference` TO '%s'@'%s'" % (service_db['name'],service_db['user'],service_db['host']),
        "GRANT SELECT, INSERT, UPDATE, DELETE ON `%s`.`fileaccesscontrollist` TO '%s'@'%s'" % (service_db['name'],service_db['user'],service_db['host']),
    ]
    _migrate_auth_server(sqls=sqls, is_offline=True, from_revision=from_revision,
            to_revision=to_revision, auth_url=None , sql_exe=sql_exe)
    sqls = [
        "INSERT INTO django_content_type (`app_label`, `model`) VALUES ('fileupload', 'uploadedfile')",
        "INSERT INTO django_content_type (`app_label`, `model`) VALUES ('fileupload', 'fileaccesscontrollist')",
        "INSERT INTO auth_permission (`name`, `codename`, `content_type_id`) VALUES ('Can upload files', 'upload_files', (SELECT `id` FROM django_content_type WHERE `app_label` = 'fileupload' AND `model` = 'uploadedfile'))",
        "INSERT INTO auth_permission (`name`, `codename`, `content_type_id`) VALUES ('Can edit ACL of uploaded files', 'edit_fileaccesscontrollist', (SELECT `id` FROM django_content_type WHERE `app_label` = 'fileupload' AND `model` = 'fileaccesscontrollist'))",
        "INSERT INTO quota_usage_type (`label`, `material`) VALUES ('uploaded file storage limit (MBytes)', (SELECT `id` FROM django_content_type WHERE `app_label` = 'fileupload' AND `model` = 'uploadedfile'))",
    ]
    _migrate_auth_server(sqls=sqls, is_offline=is_offline, from_revision=from_revision,
            to_revision=to_revision, auth_url=auth_url, sql_exe=sql_exe)
    # ### end Alembic commands ###


def downgrade(is_offline, from_revision, to_revision, service_db, auth_url=None, sql_exe=None):
    # ### commands auto generated by Alembic - please adjust! ###
    sqls = [
        "DELETE FROM quota_usage_type WHERE `material` IN (SELECT `id` FROM django_content_type WHERE `app_label` = 'fileupload' AND `model` = 'uploadedfile')",
        "DELETE FROM auth_permission WHERE `content_type_id` IN (SELECT `id` FROM django_content_type WHERE `app_label` = 'fileupload')",
        "DELETE FROM django_content_type WHERE `app_label` = 'fileupload' AND `model` = 'fileaccesscontrollist'",
        "DELETE FROM django_content_type WHERE `app_label` = 'fileupload' AND `model` = 'uploadedfile'",
    ]
    _migrate_auth_server(sqls=sqls, is_offline=is_offline, from_revision=from_revision,
            to_revision=to_revision, auth_url=auth_url, sql_exe=sql_exe)
    sqls = [
        "REVOKE SELECT, INSERT, UPDATE, DELETE ON `%s`.`uploadedfile` FROM '%s'@'%s'" % (service_db['name'],service_db['user'],service_db['host']),
        "REVOKE SELECT, INSERT, UPDATE, DELETE ON `%s`.`filereference` FROM '%s'@'%s'" % (service_db['name'],service_db['user'],service_db['host']),
        "REVOKE SELECT, INSERT, UPDATE, DELETE ON `%s`.`fileaccesscontrollist` FROM '%s'@'%s'" % (service_db['name'],service_db['user'],service_db['host']),
    ]
    _migrate_auth_server(sqls=sqls, is_offline=True, from_revision=from_revision,
            to_revision=to_revision, auth_url=None , sql_exe=sql_exe)
    op.drop_table('fileaccesscontrollist')
    op.drop_table('filereference')
    op.drop_table('uploadedfile')
    # ### end Alembic commands ###


