# Generated by Django 3.1 on 2020-07-31 07:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
from common.models.migrations import AlterTablePrivilege


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('user_management', '0014_auto_20200723_2348'),
    ]

    operations = [
        migrations.RenameModel(
            old_name='UserLogin',
            new_name='GenericUserAuthRelation',
        ),
        migrations.AddField(
            model_name='emailaddress',
            name='time_deleted',
            field=models.DateTimeField(blank=True, default=None, editable=False, null=True),
        ),
        migrations.AddField(
            model_name='useremailaddress',
            name='time_deleted',
            field=models.DateTimeField(blank=True, default=None, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='phonenumber',
            name='country_code',
            field=models.CharField(max_length=3, validators=[django.core.validators.RegexValidator(message="non-digit character detected, or length of digits doesn't meet requirement. It must contain only digit e.g. '91', '886' , from 1 digit up to 3 digits", regex='^\\d{1,3}$')]),
        ),
        migrations.AlterField(
            model_name='phonenumber',
            name='line_number',
            field=models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message="non-digit character detected, or length of digits doesn't meet requirement. It must contain only digits e.g. '9990099', from 7 digits up to 15 digits", regex='^\\+?1?\\d{7,15}$')]),
        ),
        migrations.AlterModelTable(
            name='genericuserauthrelation',
            table='generic_user_auth_relation',
        ),
        migrations.CreateModel(
            name='AuthUserResetRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashed_token', models.CharField(blank=True, max_length=64, unique=True)),
                ('time_created', models.DateTimeField(auto_now_add=True)),
                ('profile', models.OneToOneField(db_column='profile', on_delete=django.db.models.deletion.CASCADE, to='user_management.genericuserprofile')),
            ],
            options={
                'db_table': 'auth_user_reset_request',
            },
        ),
    ]

    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, '_privilege_update_init'):
            for op in cls.operations:
                if isinstance(op, AlterTablePrivilege.ACCEPTED_OPERATIONS):
                    op._priv_lvl = AlterTablePrivilege.PRIVILEGE_MAP['READ_WRITE']
            privilege_update_obj = AlterTablePrivilege( autogen_ops=cls.operations,  db_setup_tag='usermgt_service')
            cls._privilege_update_init = True
        return super().__new__(cls)

