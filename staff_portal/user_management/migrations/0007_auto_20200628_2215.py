# Generated by Django 3.1 on 2020-06-28 14:15

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from common.models.migrations import AlterTablePrivilege


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('user_management', '0006_auto_20200607_1727'),
    ]

    operations = [
        migrations.CreateModel(
            name='GenericGroupAuthRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('authgroup', models.OneToOneField(db_column='auth_group', on_delete=django.db.models.deletion.CASCADE, to='auth.group')),
                ('gusergroup', models.OneToOneField(db_column='guser_group', on_delete=django.db.models.deletion.CASCADE, to='user_management.genericusergroup')),
            ],
            options={
                'db_table': 'generic_group_auth_relation',
            },
        ),
        migrations.AlterField(
            model_name='userlogin',
            name='login',
            field=models.OneToOneField(db_column='login', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.DeleteModel(
            name='GenericUserGroupRelation',
        ),
    ]

    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, '_privilege_update_init'):
            for op in cls.operations:
                if isinstance(op, AlterTablePrivilege.ACCEPTED_OPERATIONS):
                    op._priv_lvl = AlterTablePrivilege.PRIVILEGE_MAP['READ_WRITE']
            privilege_update_obj = AlterTablePrivilege( autogen_ops=cls.operations,  db_setup_tag='usermgt_service')
            cls._privilege_update_init = True
        return super().__new__(cls)

