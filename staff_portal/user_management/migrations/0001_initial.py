# Generated by Django 3.1 on 2020-05-28 08:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from common.models.migrations import AlterTablePrivilege


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('location', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_part', models.CharField(max_length=50)),
                ('domain_name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'email_address',
            },
        ),
        migrations.CreateModel(
            name='GenericUserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_num_addr', models.SmallIntegerField(default=1)),
                ('max_num_phone', models.SmallIntegerField(default=1)),
                ('max_num_email', models.SmallIntegerField(default=0)),
                ('name', models.CharField(max_length=50)),
                ('meta_path', models.CharField(max_length=200)),
                ('parent', models.ForeignKey(db_column='parent', on_delete=django.db.models.deletion.CASCADE, to='user_management.genericusergroup')),
            ],
            options={
                'db_table': 'generic_user_group',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenericUserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_num_addr', models.SmallIntegerField(default=1)),
                ('max_num_phone', models.SmallIntegerField(default=1)),
                ('max_num_email', models.SmallIntegerField(default=0)),
                ('max_bookings', models.SmallIntegerField(default=1)),
                ('max_entry_waitlist', models.SmallIntegerField(default=1)),
                ('first_name', models.CharField(max_length=32)),
                ('last_name', models.CharField(max_length=32)),
                ('active', models.BooleanField(default=False)),
                ('time_created', models.DateTimeField()),
                ('last_updated', models.DateTimeField()),
            ],
            options={
                'db_table': 'generic_user_profile',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_code', models.CharField(max_length=3)),
                ('line_number', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'phone_number',
            },
        ),
        migrations.CreateModel(
            name='UserPhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(db_column='user_id')),
                ('phone', models.OneToOneField(db_column='phone', on_delete=django.db.models.deletion.CASCADE, to='user_management.phonenumber')),
                ('user_type', models.ForeignKey(db_column='user_type', limit_choices_to=models.Q(models.Q(('app_label', 'user_management'), ('model', 'GenericUserProfile')), models.Q(('app_label', 'user_management'), ('model', 'GenericUserGroup')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'user_phone_number',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserLogin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login', models.ForeignKey(db_column='login', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('profile', models.OneToOneField(db_column='profile', on_delete=django.db.models.deletion.CASCADE, to='user_management.genericuserprofile')),
            ],
            options={
                'db_table': 'user_login',
            },
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(db_column='user_id')),
                ('address', models.OneToOneField(db_column='address', on_delete=django.db.models.deletion.CASCADE, to='location.location')),
                ('user_type', models.ForeignKey(db_column='user_type', limit_choices_to=models.Q(models.Q(('app_label', 'user_management'), ('model', 'GenericUserProfile')), models.Q(('app_label', 'user_management'), ('model', 'GenericUserGroup')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'user_location',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserEmailAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(db_column='user_id')),
                ('email', models.OneToOneField(db_column='email', on_delete=django.db.models.deletion.CASCADE, to='user_management.emailaddress')),
                ('user_type', models.ForeignKey(db_column='user_type', limit_choices_to=models.Q(models.Q(('app_label', 'user_management'), ('model', 'GenericUserProfile')), models.Q(('app_label', 'user_management'), ('model', 'GenericUserGroup')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'user_email_address',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GenericUserGroupRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(db_column='group', on_delete=django.db.models.deletion.CASCADE, to='user_management.genericusergroup')),
                ('user', models.ForeignKey(db_column='user', on_delete=django.db.models.deletion.CASCADE, to='user_management.genericuserprofile')),
            ],
            options={
                'db_table': 'generic_user_group_relation',
            },
        ),
        ##migrations.CreateModel(
        ##    name='Employee',
        ##    fields=[
        ##        ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
        ##        ('profile', models.OneToOneField(db_column='profile', on_delete=django.db.models.deletion.CASCADE, to='user_management.genericuserprofile')),
        ##    ],
        ##    options={
        ##        'db_table': 'employee',
        ##    },
        ##),
        migrations.CreateModel(
            name='UsermgtChangeSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('done_by', models.CharField(max_length=128)),
                ('time_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('object_id', models.CharField(db_column='object_id', max_length=100)),
                ('content_type', models.ForeignKey(db_column='content_type', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'usermgt_soft_delete_changeset',
            },
        ),
        migrations.CreateModel(
            name='UsermgtSoftDeleteRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('object_id', models.CharField(db_column='object_id', max_length=100)),
                ('changeset', models.ForeignKey(db_column='changeset', on_delete=django.db.models.deletion.CASCADE, related_name='soft_delete_records', to='user_management.usermgtchangeset')),
                ('content_type', models.ForeignKey(db_column='content_type', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'db_table': 'usermgt_soft_delete_record',
            },
        ),
    ]

    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, '_privilege_update_init'):
            for op in cls.operations:
                if isinstance(op, AlterTablePrivilege.ACCEPTED_OPERATIONS):
                    op._priv_lvl = AlterTablePrivilege.PRIVILEGE_MAP['READ_WRITE']
            privilege_update_obj = AlterTablePrivilege( autogen_ops=cls.operations,  db_setup_tag='usermgt_service')
            cls._privilege_update_init = True
        return super().__new__(cls)

