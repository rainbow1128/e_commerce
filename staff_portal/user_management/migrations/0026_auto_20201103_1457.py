# Generated by Django 3.1 on 2020-11-03 06:57

from django.db import migrations, models
import django.db.models.deletion
from common.models.migrations import AlterTablePrivilege


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0017_auto_20201103_1455'),
        ('location', '0004_auto_20200729_1852'),
        ('user_management', '0025_authuserresetrequest_email'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='genericusergroup',
            name='roles',
        ),
        migrations.AlterField(
            model_name='authuserresetrequest',
            name='profile',
            field=models.OneToOneField(blank=True, db_column='profile', on_delete=django.db.models.deletion.CASCADE, related_name='auth_rst_req', to='user_management.genericuserprofile'),
        ),
        migrations.AlterField(
            model_name='useremailaddress',
            name='email',
            field=models.OneToOneField(db_column='email', on_delete=django.db.models.deletion.CASCADE, related_name='useremail', to='user_management.emailaddress'),
        ),
        migrations.AlterField(
            model_name='userlocation',
            name='address',
            field=models.OneToOneField(db_column='address', on_delete=django.db.models.deletion.CASCADE, related_name='usergeoloc', to='location.location'),
        ),
        migrations.AlterField(
            model_name='userphonenumber',
            name='phone',
            field=models.OneToOneField(db_column='phone', on_delete=django.db.models.deletion.CASCADE, related_name='userphone', to='user_management.phonenumber'),
        ),
        migrations.CreateModel(
            name='GenericGroupAppliedRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(db_column='approved_by', on_delete=django.db.models.deletion.CASCADE, related_name='approved_applied_roles_in_group', to='user_management.genericuserprofile')),
                ('group', models.ForeignKey(db_column='group', on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='user_management.genericusergroup')),
                ('role', models.ForeignKey(db_column='role', on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='auth.group')),
            ],
            options={
                'db_table': 'generic_group_applied_role',
            },
        ),
    ]

    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, '_privilege_update_init'):
            for op in cls.operations:
                if isinstance(op, AlterTablePrivilege.ACCEPTED_OPERATIONS):
                    op._priv_lvl = AlterTablePrivilege.PRIVILEGE_MAP['READ_WRITE']
            privilege_update_obj = AlterTablePrivilege( autogen_ops=cls.operations,  db_setup_tag='usermgt_service')
            cls._privilege_update_init = True
        return super().__new__(cls)

