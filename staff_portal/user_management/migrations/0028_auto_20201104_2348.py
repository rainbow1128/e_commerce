# Generated by Django 3.1 on 2020-11-04 15:48

from django.db import migrations, models
import django.db.models.deletion
from common.models.migrations import AlterTablePrivilege


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0017_auto_20201103_1455'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('user_management', '0027_auto_20201103_2232'),
    ]

    operations = [
        migrations.CreateModel(
            name='GenericUserAppliedRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.PositiveIntegerField(db_column='user_id')),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'generic_user_applied_role',
            },
        ),
        migrations.RemoveField(
            model_name='genericuserprofile',
            name='roles',
        ),
        migrations.DeleteModel(
            name='GenericGroupAppliedRole',
        ),
        migrations.AddField(
            model_name='genericuserappliedrole',
            name='approved_by',
            field=models.ForeignKey(db_column='approved_by', on_delete=django.db.models.deletion.CASCADE, related_name='approval_role', to='user_management.genericuserprofile'),
        ),
        migrations.AddField(
            model_name='genericuserappliedrole',
            name='role',
            field=models.ForeignKey(db_column='role', on_delete=django.db.models.deletion.CASCADE, related_name='users_applied', to='auth.group'),
        ),
        migrations.AddField(
            model_name='genericuserappliedrole',
            name='user_type',
            field=models.ForeignKey(db_column='user_type', limit_choices_to=models.Q(models.Q(('app_label', 'user_management'), ('model', 'GenericUserProfile')), models.Q(('app_label', 'user_management'), ('model', 'GenericUserGroup')), _connector='OR'), on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
    ]

    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, '_privilege_update_init'):
            for op in cls.operations:
                if isinstance(op, AlterTablePrivilege.ACCEPTED_OPERATIONS):
                    op._priv_lvl = AlterTablePrivilege.PRIVILEGE_MAP['READ_WRITE']
            privilege_update_obj = AlterTablePrivilege( autogen_ops=cls.operations,  db_setup_tag='usermgt_service')
            cls._privilege_update_init = True
        return super().__new__(cls)

