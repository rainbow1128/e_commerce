# Generated by Django 3.1 on 2020-11-05 06:11

from django.db import migrations, models
import django.db.models.deletion
from common.models.migrations import AlterTablePrivilege


class Migration(migrations.Migration):

    dependencies = [
        ('user_management', '0028_auto_20201104_2348'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='genericuserprofile',
            name='groups',
        ),
        migrations.AlterField(
            model_name='genericuserappliedrole',
            name='approved_by',
            field=models.ForeignKey(blank=True, db_column='approved_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approval_role', to='user_management.genericuserprofile'),
        ),
        migrations.CreateModel(
            name='GenericUserGroupRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approved_by', models.ForeignKey(blank=True, db_column='approved_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approval_group', to='user_management.genericuserprofile')),
                ('group', models.ForeignKey(db_column='group', on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='user_management.genericusergroup')),
                ('profile', models.ForeignKey(db_column='profile', on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='user_management.genericuserprofile')),
            ],
            options={
                'db_table': 'generic_user_group_relation',
            },
        ),
    ]

    def __new__(cls, *args, **kwargs):
        if not hasattr(cls, '_privilege_update_init'):
            for op in cls.operations:
                if isinstance(op, AlterTablePrivilege.ACCEPTED_OPERATIONS):
                    op._priv_lvl = AlterTablePrivilege.PRIVILEGE_MAP['READ_WRITE']
            privilege_update_obj = AlterTablePrivilege( autogen_ops=cls.operations,  db_setup_tag='usermgt_service')
            cls._privilege_update_init = True
        return super().__new__(cls)

